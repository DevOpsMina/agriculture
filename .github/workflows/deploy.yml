name: Deploy React App to AWS

on:
  push:
    branches:
      - master

env:
  IMAGE_URI: 423623831693.dkr.ecr.us-east-1.amazonaws.com/agri:latest
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t $IMAGE_URI .

    - name: Push image to ECR
      run: |
        docker push $IMAGE_URI

    - name: Decode and write SSH key
      run: |
        echo "${{ secrets.EC2_KEY }}" > agri.pem
        chmod 600 agri.pem

    - name: SSH and deploy on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i agri.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -e  # Exit immediately if a command fails

          echo "Logging in to Amazon ECR..."
          aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 423623831693.dkr.ecr.us-east-1.amazonaws.com

          echo "Pulling latest Docker image..."
          sudo docker pull 423623831693.dkr.ecr.us-east-1.amazonaws.com/agri:latest

          echo "Stopping and removing existing container if exists..."
          sudo docker stop react-app || true
          sudo docker rm react-app || true

          echo "Running new container..."
          sudo docker run -d -p 80:80 --name react-app 423623831693.dkr.ecr.us-east-1.amazonaws.com/agri:latest

          echo "Deployment complete."
        EOF
      