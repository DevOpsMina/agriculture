name: Deploy React App to AWS

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        sudo docker build -t $IMAGE_NAME .
        sudo docker tag $IMAGE_NAME:latest ${{ steps.login-ecr.outputs.registry }}/$IMAGE_NAME:latest

    - name: Push image to ECR
      run: |
        sudo docker push ${{ steps.login-ecr.outputs.registry }}/$IMAGE_NAME:latest

    - name: Decode and write SSH key
      run: |
        echo "${{ secrets.EC2_KEY }}" | base64 -d > agri.pem
        chmod 600 agri.pem

    - name: SSH and deploy on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ec2-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          sudo docker pull ${{ steps.login-ecr.outputs.registry }}/$IMAGE_NAME:latest
          sudo docker stop react-app || true && docker rm react-app || true
          sudo docker run -d -p 80:80 --name react-app ${{ steps.login-ecr.outputs.registry }}/$IMAGE_NAME:latest
        EOF
